 # calling functions that need information 

when you call a fnction that has parameters , you specify the values it

should use in the parentheses that follow its name, the values are called 

arguments :- 




arguments as values 

when the function below is called , the number 3 will be used for width of the wall and 5 will be used for its height 

getArea (3,5);

arguments as variables 

you do not have to specify actual values when calling function - you can use 

variables in their place the following does the same thing 

wallwigh = 3;

wallHeight = 5;

getArea(wallWidth,wallHeight);




getting a single value out of function 

some functions return information to the code that called them .

example :- 

function calculateArea (width , height ) { 

var area = width * height; 

return area; 

var wallone = calculateArea (3,5);

var walltow = calculaterea (8,5);




getting multiple values out of a function 

fanction can return more than one value an array 

for example , this function calculates the are and volume 

function getSize (width , height , depth) { 

var area = width * height;

var volume = width * height * depth ;

var sizes = [ area , volume];

return sizes; 

}

var areaone = getSize (3.2.3)

var volumeone = getSize (3,2,3)[1]:

ANONYMOUS FUNCTIONS & FUNCTION EXPRESSIONS




FUNCTION DECLARATION  

A function declaration creates a function that you
can call later in your code.In order to call the function later in your code, you
must give it a name, so these are known as named
functions

FUNCTION EXPRESSION  

If you put a function where the interpreter would expect to see an expression, then it is treated as an expression, and it is known as a function expression.




IMMEDIATELY INVOKED FUNCTION EXPRESSIONS.

This way of writing a function is used in several different situations. 

  




VARIABLE SCOPE  

The location where you declare a variable will affect where it can be used within your code. If you declare it within a function, it can only be used within that function. This is known as the variable's scope.

LOCAL VARIABLES  

When a variable is created inside a function using the var keyword, it can only be used in that function. It is called a local variable or function-level variable

GLOBAL VARIABLES  

If you create a variable outside of a function, then it can be used anywhere within the script.

USING WHILE LOOPS  

The key difference between a do while  loop and a do while 
loop is that the statements in the code block come before the condition. This means that those statements are run once whether
or not the condition is met. 

1. number holds the number that the calculations will be performed with


2.perator indicates whether it should be addition or multiplication




EXAMPLE  

  




summary of loops 

Conditional statements allow your code to make
decisions about what to do next.
Comparison operators (===, ! ==, ==, ! =, <, >, <=, =>)
are used to compare two operands.
Logical operators allow you to combine more than one
set of comparison operators.
if ... else statements allow you to run one set of code
if a condition is true, and another if it is false.
switch statements allow you to compare a value
against possible outcomes (and also provides a default
option if none match).
Data types can be coerced from one type to another.
All values evaluate to either truthy or falsy.
There are three types of loop: for, while, and
do ... while. Each repeats a set of statements. 

-----------------------------------------------------------------------------------

the doom 

The Document Object Model (DOM) specifies how browsers should create a model of an HTML page and how JavaScript can access and update the contents of a web page while it is in the browser window.  

MAKING A MODEL OF THE HTM L PAGE 

When the browser loads a web page, it creates a model of the page in memory. The DOM specifies the way in which the browser should structure this model using.

When the browser loads a web page, it creates a model of the page in memory. The DOM specifies the way in which the browser should structure this model using. 

The DOM also defines methods and properties to access and update each object in this model, which in turn updates what the user sees in the browser.

THE DOM TREE IS A MODEL OF A WEB PAGE  .




ELEMENT NODES HTML elements describe the structure of an HTML page. (The -

elements describe what parts are headings; the

tags indicate where paragraphs of text start and finish; and so on.)




THE DOCUMENT NODE
Above, you can see the HTML code for a shopping
list, and on the right hand page is its DOM tree.
Every element, attribute, and piece of text in the
HTML is represented by its own DOM node. 

  




  

SELECTING AN ELEMENT FROM A NODELIST 

var elements = document.getElementsByClassName('hot')
if (elements.length>= 1) {
var firstltem = elements.item(O);




NODELISTS: DOM QUERIES THAT RETURN MORE THAN ONE ELEMENT.




When a DOM method can return more than one element, it returns a Nodelist (even if it only finds one matching element). 




A Nodelist is a collection of element nodes. Each node is given an index number (a number that starts at zero, just like an array).

Nodelists look like arrays and are numbered like arrays, but they are not actually arrays; they are a type of object called a collection.




getElementsByTagName('hl ' ) 

getElementsByTagName('li ') 

getElementsByClassName('hot') 

SELECTING AN ELEMENT FROM A NODELIST

The get El ementsByCl ass Name() method allows you to select elements whose c 1 ass attribute contains a specific value. 




SELECTING ELEMENTS USING CSS SELECTORS. 




querySe 1 ector() returns the first element node that matches the CSS-style selector. querySe 1ectorA11 () returns a Nodelist of all of the matches.  

1. This is how the page starts. There are three elements that have a cl ass attribute whose value is hot

2. When the second selector runs, there are now only two elements whose cl ass attributes have a value of hot (see left), 

When the second selector has done its job, the DOM tree now only holds one element whose c 1 ass attribute has a value of hot. 

WHITESPACE NODES  

Traversing the DOM can be difficult because some browsers add a text node whenever they come across whitespace between elements.  

Most browsers, except IE, treat whitespace between elements (such as spaces or carriage returns) as a text node

Traversing the DOM can be difficult because some browsers add a text node whenever they come across whitespace between elements.

PREVIOUS & NEXT SIBLING

You have just seen that these properties can return inconsistent results in different browsers. However, it is safe to use them when there is no whitespace between elements.

FlRST & LAST CHILD

These properties also return inconsistent results if there is whitespace between elements. In this example, a slightly different solution is used in the HTML - the closing tags 

HOW TO GET/UPDATE ELEMENT CONTENT 

So far this chapter has focused on finding elements in the DOM tree.The rest of this chapter shows how to access/update element content. Your choice of techniques depends upon what the element contains.

ACCESS & UPDATE A TEXT NODE WITH NODEVALUE

When you select a text node, you can retrieve or amend the content of it
using the node  property. 




  


